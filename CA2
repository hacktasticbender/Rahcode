#include <omp.h> 
#include <stdio.h> 
#include <stdlib.h> 
#define N 50 
int main (int argc, char *argv[]) 
{ 
int i, nthreads, tid; 
float a[N], b[N], c[N], d[N]; 
/* Some initializations */ 
for (i=0; i<N; i++) { 
a[i] = i * 1.5; 
b[i] = i + 22.35; 
c[i] = d[i] = 0.0; 
} 
#pragma omp parallel shared (a,b,c,d,nthreads) private(i,tid) 
{ 
tid = omp_get_thread_num(); 
if (tid == 0) 
{ 
nthreads = omp_get_num_threads(); 
printf("Number of threads = %d\n", nthreads); 
} 
printf("Thread %d starting...\n",tid); 
#pragma omp sections nowait 
{ 
#pragma omp section 
{ 
printf("Thread %d doing section 1\n",tid); 
for (i=0; i<N; i++) 
{ 
c[i] = a[i] + b[i]; 
printf("Thread %d: c[%d]= %f\n",tid,i,c[i]); 
} 
} 
#pragma omp section 
{ 
printf("Thread %d doing section 2\n",tid); 
for (i=0; i<N; i++) 
{ 
d[i] = a[i] * b[i]; 
printf("Thread %d: d[%d]= %f\n",tid,i,d[i]); 
} 
} 
} /* end of sections */ 
printf("Thread %d done.\n",tid); 
} /* end of parallel section */ 


6
#include <omp.h> 
#include <stdio.h> 
#include <stdlib.h> 
int main (int argc, char *argv[]) 
{ 
int i, n; 
float a[1000], b[1000], sum; 
/* Some initializations */ 
n = 1000; 
for (i=0; i < n; i++) 
a[i] = b[i] = i * 1.0; 
sum = 0.0; 
#pragma omp parallel for reduction(+:sum) 
for (i=0; i < n; i++) 
sum = sum + (a[i] * b[i]); 
printf(" Sum = %f\n",sum); 
}

8
#include <omp.h> 
#include<stdio.h> 
int a, b, i, tid; 
float x; 
#pragma omp threadprivate(a, x) 
main ()  
{ 
/* Explicitly turn off dynamic threads */ 
omp_set_dynamic(0); 
printf("1st Parallel Region:\n"); 
#pragma omp parallel private(b,tid) 
{ 
tid = omp_get_thread_num(); 
a = tid; 
b = tid; 
x = 1.1 * tid +1.0; 
printf("Thread %d: a,b,x= %d %d %f\n",tid,a,b,x); 
} /* end of parallel section */ 
printf("************************************\n"); 
printf("Master thread doing serial work here\n"); 
printf("************************************\n"); 
printf("2nd Parallel Region:\n"); 
#pragma omp parallel private(tid) 
{ 
tid = omp_get_thread_num(); 
printf("Thread %d: a,b,x= %d %d %f\n",tid,a,b,x); 
} /* end of parallel section */ 
}
