PUSH 
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
#define MAX 5

/*function to push an element into stack*/
void push(int item,int s[],int *top)
{
 if(*top==MAX-1)
 {
 printf("stack overflow\n");
 return;
 }
 (*top)++;
 s[*top]=item;
 printf("\t\t%d is succesfully inserted\n", item);
}
/*function to pop an element from the stack*/
void pop(int s[],int *top)
{
 if(*top==-1)
 {
 printf("stack is empty\n");
 return;
 }
 printf("\t\t%d element is deleted",s[*top]);
 (*top)--;
}
/*function to display the contents of the stack*/
void display(int s[],int top)
{
 int i;
 if(top!=-1)
 {
 printf("stack contains :\n");
 for (i=0;i<=top;i++)
 printf("%d\n", s[i]);
 }
 else
 printf("stack is empty\n");
Implement a menu driven Program for the following operations on STACK of Integers
(Array Implementation of Stack with maximum size MAX)
(i) Push an Element on to Stack (Handle the situation of overflow)
(ii) Pop an Element from Stack (Handle the situation of underflow)
(iii) Display the contents of Stack
}
void main()
{
 int choice,item,s[MAX],top=-1;
 for(;;)
 {
 printf("\n*****************");
 printf("\n1.push \n 2.pop\n 3.display\n 4.exit\n");
 printf("\n*****************");
 printf("\nEnter your choice:");
 scanf("%d",&choice);
 switch(choice)
 {
 case 1:
printf("\nEnter an item to be inserted:");
 scanf("%d",&item);
 push(item,s,&top);
 break;
 case 2:
pop(s,&top);
 break;
 case 3:
display(s,top);
 break;
 default:
printf("\ninvaild choice\n");
 exit(0);
 }
 }
}


INFIX
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#include<string.h>
#define max 20
int top=-1;
/* Function that returns Input Precedence values */
int G(char symb)
{
 switch(symb)
 {
 case '+':
 case '-':return 1;
 case '*':
 case '%':
 case '/':return 3;
 case '^':
 case '$':return 6;
 case '(':return 9;
 case ')':return 0;
 default:return 7;
 }
}
/* Function that returns Stack Precedence values */
int F(char symb)
{
 switch (symb)
 {
 case '+':
 case '-':return 2;
 case '*':
 case '%':
 case '/':return 4;
 case '$':
 case '^':return 5;
 case '(':return 0;
 case '#':return -1;
 default:return 8;
 }
}
/* Function to convert an infix expression to postfix expression */
void infix_postfix(char inf[],char pos[])
{
 int i,j=0;
 char symb;
 char s[30];
 s[++top]='#';
 for(i=0;i<strlen(inf);i++)
 {
 symb=inf[i];
 while(F(s[top])>G(symb))
 {
 pos[j++]=s[top--];
 }

 if(F(s[top])!=G(symb))
 s[++top]=symb;

 else

 top--;
 }
 while(s[top]!='#')
 {
 pos[j++]=s[top--];
 }
 pos[j]='\0';
 printf("Expression in Postfix Format: ");
 for(i=0;i<strlen(inf);i++)
 printf("%c",pos[i]);
}
void main()
{
 char inf[30],pos[30];
 printf("Enter an Expression in Infix format:\n");
 scanf("%s",inf);
 infix_postfix(inf,pos);
}



TOWER OF HANOI
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
/* Function to find maximum amongst n elements */
int findMaxElement(int arr[],int size)
{
 int static i=0, max=-999;
 if(i<size)
 {
 if(max<arr[i])
 {
 max=arr[i];
 }
 i++;
 findMaxElement(arr,size);
 }
 return max;
}
/* Function to find product of two natural numbers */
int product(int a,int b)
{
 if(a<b)
 {
 return product(b,a);
 }
 else if(b!=0)
 {
 return (a+product(a,b-1));
 }
 else
 return 0;
}
/* Function definition for Tower_of_hanoi */
void tower(int n,char src,char aux,char dest)
{
 if(n==1)
 {
 printf("Move disk %d from peg %c to peg %c",n,src,dest);
 return;
Implement the following using recursion:
(i) Tower_of_Hanoi
(ii) GCD of two numbers
(iii) Largest of ‘n’ numbers
 }
 tower((n-1),src,dest,aux);
 printf("\nMove disk %d from peg %c to peg %c\n",n,src,dest);
 tower((n-1),aux,src,dest);
}
void main()
{
 int arr[20];
 int i,n,max;
 int a,b,res;
 int num,ch;
 //clrscr();
 for(;;)
 {
 printf(" \n******************************************\n");
 printf(" 1 : find Max Element\n");
 printf(" 2 : Multiplication of two natural numbers\n");
 printf(" 3 : Tower of Hanoi\n");
 printf(" 4 : Exit:Any other choice : \n");
 printf(" ******************************************\n");
 printf("Enter your choice\n");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1:
printf("Enter the size of the array\n");
 scanf("%d",&n);
 printf("Enter %d elements of an array\n",n);
 for(i=0;i<n;i++)
 {
 scanf("%d",&arr[i]);
 }
 max=findMaxElement(arr,n);
 printf("Maximum element in the array is %d\n",max);
 break;
 case 2:
printf("Enter two numbers to find their product:\n");
 scanf("%d%d",&a,&b);
 res=product(a,b);
 printf("Product of %d and %d is %d\n",a,b,res);
 break;
 case 3:
printf("Enter the number of disks :\n");
 scanf("%d",&num);
 printf("The sequence of moves involved in the Tower of Hanoi are:\n");
 tower(num,'S','T','D');
 break;
 default:
exit(0);
 }
 }
}
