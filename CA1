a ) To illustrate the data hazard 
#include <stdio.h>  
#include <omp.h>  
#define ARRAY_SIZE 25 
void bubble_sort(int arr[], int n)  
{  
}  
for (int i = 0; i < n - 1; ++i)  
{  
// Last i elements are already sorted  
for (int j = 0; j < n - i - 1; ++j)  
{  
}  
}  
if (arr[j] > arr[j + 1])  
{ 
// Swap arr[j] and arr[j+1]  
}  
int temp = arr[j];  
arr[j] = arr[j + 1];  
arr[j + 1] = temp;  
int main()  
{  
} 
int arr[ARRAY_SIZE]; 
#pragma omp parallel for 
for (int i = 0; i < ARRAY_SIZE; ++i)  
{  
}  
arr[i]=random()%100; 
printf("\n the array elements are:\n"); 
for(i=0; i<ARRAY_SIZE; i++) 
printf("%d  ",arr[i]); 
// Sort the array using bubble sort in parallel  
#pragma omp parallel shared(arr)  
{ 
}  
bubble_sort(arr, ARRAY_SIZE);  
printf("Sorted array:\n");  
for (int i = 0; i < ARRAY_SIZE; ++i)  
{  
}  
printf("%d   ", arr[i]);  
printf("\n");  
retu
b ) To eliminate the data hazard 
void bubble_sort(int arr[], int n)  
{  
#pragma omp critical 
for (int i = 0; i < n - 1; ++i)  
{  
// Last i elements are already sorted  
for (int j = 0; j < n - i - 1; ++j)  
{  
if (arr[j] > arr[j + 1])  
{ 
// Swap arr[j] and arr[j+1]  
int temp = arr[j];  
arr[j] = arr[j + 1];  
arr[j + 1] = temp;  
} 
}  
}  
}  
}  



2
#include <stdio.h>  
#include <omp.h>  
#define ARRAY_SIZE 100  
#define TARGET 42  
int binary_search(int arr[], int left, int right, int target)  
{  
while (left <= right)  
{ 
}  
int mid = left + (right - left) / 2;           
if (arr[mid] == target)                   
return mid;  
if (arr[mid] < target)                   
left = mid + 1;  
else                                              
return -1;         
right = mid - 1; 
// Check if target is present at mid 
// If target greater, ignore left half 
// If target is smaller, ignore right half  
// Target element is not present in the array  
}  
int main()  
{ 
int arr[ARRAY_SIZE];  
int i, result = -1;  
for (i = 0; i < ARRAY_SIZE; ++i)               
{  
arr[i] = i; 
// Initialize sorted array 
}  
// Parallel region for binary search  
#pragma omp parallel shared(arr, result)  
{  
}  
int tid = omp_get_thread_num();  
int num_threads = omp_get_num_threads();  
int chunk_size = ARRAY_SIZE / num_threads;    // Calculate bounds for each thread 
int left = tid * chunk_size;  
int right = (tid == num_threads - 1) ? ARRAY_SIZE - 1 : (tid + 1) * chunk_size - 1;  
// Perform binary search within thread's bounds  
int local_result = binary_search(arr, left, right, TARGET);  
// Use reduction to find global result (if found)  
#pragma omp critical  
{ 
}  
if (local_result != -1 && result == -1)  
result = local_result;  
// Output the result  
if (result != -1)  
printf("Element %d found at index %d.\n", TARGET, result);  
else  
return 0;  
} 
printf("Element %d not found in the array.\n", TARGET); 


3
#include <stdio.h> 
#include <omp.h> 
#define N 20 
int main() 
{ 
int fib[N]; 
// Initialize the first two Fibonacci numbers 
fib[0] = 0; 
fib[1] = 1; 
// Sequential computation of Fibonacci numbers 
for (int i = 2; i < N; i++) { 
fib[i] = fib[i-1] + fib[i-2]; 
} 
printf("Fibonacci sequence (sequential):\n"); 
for (int i = 0; i < N; i++) { 
printf("%d ", fib[i]); 
} 
printf("\n"); 
// Parallel computation of Fibonacci numbers with loop unrolling using OpenMP 
#pragma omp parallel for unroll 
for (int i = 2; i < N; i++) { 
fib[i] = fib[i-1] + fib[i-2]; 
} 
printf("Fibonacci sequence (parallel with loop unrolling):\n"); 
for (int i = 0; i < N; i++) { 
printf("%d ", fib[i]); 
} 
printf("\n"); 
return 0; 
}
