STRUCTURE
#include <stdio.h>
#include <conio.h>
/* Structure Declaration*/
struct distance
{
int kms;
int meters;
};
typedef struct distance DISTANCE;
/*Function prototypes*/
DISTANCE add_distance (DISTANCE *, DISTANCE *);
DISTANCE subtract_distance (DISTANCE *, DISTANCE *);
/*Structure variable declaration*/
DISTANCE d1, d2, d3, d4;
int main()
{
int option;
clrscr();
do
{
printf("\n ******** MAIN MENU *********");
printf("\n 1. Read the distances ");
printf("\n 2. Display the distances");
printf("\n 3. Add the distances");
printf("\n 4. Subtract the distances");
printf("\n 5. EXIT");
printf("\n Enter your option : ");
scanf("%d", &option);
switch(option)
{
case 1:
printf("\n Enter the first distance  in kms and meters: ");
scanf("%d %d", &d1.kms, &d1.meters);
printf("\n Enter the second distance  in kms and meters: ");
scanf("%d %d", &d2.kms, &d2.meters);
break;
case 2:
printf("\n The first distance is : %d kms %d meters",d1.kms,
 d1.meters);
printf("\n The second distance is : %d kms %d
 meters",d2.kms, d2.meters);
break;
case 3:
d3 = add_distance(&d1, &d2);
printf("\n The sum of two distances is : %d kms %d meters",
 d3.kms, d3.meters);
break;
case 4:
d4 = subtract_distance(&d1, &d2);
printf("\n The difference between two distances is : %d kms
 %d meters", d4.kms, d4.meters);
break;
}
}while(option != 5);
getch();
return 0;
}
/*function to add two distance*/
DISTANCE add_distance(DISTANCE *d1, DISTANCE *d2)
{
DISTANCE sum;
sum.meters = d1->meters + d2->meters;
sum.kms = d1->kms + d2->kms;
while (sum.meters >= 1000)
{
sum.meters = sum.meters % 1000;
sum.kms += 1;
}
return sum;
}
/*function to subtract two distance*/
DISTANCE subtract_distance(DISTANCE *d1, DISTANCE *d2)
{
 DISTANCE sub;
 if(d1->kms > d2->kms)
 {
 sub.meters = d1->meters - d2->meters;
 sub.kms = d1->kms - d2->kms;
 }
 else
 {
 sub.meters = d2->meters - d1->meters;
 sub.kms = d2->kms - d1->kms;
 }
 if(sub.meters < 0)
{
sub.meters = sub.meters + 1000;
sub.kms -= 1;
}
return sub;
}



SLL
#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
/*Structure declaration for a node*/
struct node
{
int info;
struct node *link;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode(void)
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
{
printf("\nOut of memory");
exit(0);
}
return x;
}
/*function to insert a node at the rear end in SLL*/
NODE insert_rear(int item,NODE first)
{
NODE temp,cur;
temp=getnode();
temp->info=item;
temp->link=NULL;
if(first==NULL)
return temp;
cur=first;
while(cur->link!=NULL)
{
cur=cur->link;
}
cur->link=temp;
return first;
}
/*function to delete a node whose is specified in SLL */
NODE delete_item(NODE first, int item)
{
NODE prev, cur;
if(first==NULL)
{
printf("\n List is Empty");
return first;
}
/*Search for the item specified in each node*/
prev=NULL;
cur=first;
while(cur!=NULL && item!=cur->info)
{
prev=cur;
cur=cur->link;
}
if(cur==NULL)
{
printf("\n The item to be deleted is not found in the list");
return first;
}
/*delete the node*/
prev->link=cur->link;
free(cur);
return first;
}
/*function to display contents of the SLL*/
void display(NODE first)
{
NODE temp;
if(first==NULL)
{
printf("\nList is empty");
return;
}
printf("\nThe contents of the list:");
temp=first;
while(temp!=NULL)
{
printf("%d\t",temp->info);
temp=temp->link;
}
printf("\n");
}
int main()
{
NODE first=NULL;
int choice,item,n,i;
//clrscr();
do
{
printf("\n 1: Create List\n 2: Delete specified item\n 3: Display\n 4: Exit\n");
printf("\nEnter the choice:");
scanf("%d",&choice);
switch(choice)
{
case 1: printf("\nEnter the no. of nodes to create List:");
 scanf("%d",&n);
 for(i=1;i<=n;i++)
 {
 printf("\nEnter the item %d to be inserted:",i);
 scanf("%d",&item);
 first=insert_rear(item,first);
 }
 break;
case 2: printf("\nEnter the item to be deleted:");
scanf("%d",&item);
 first=delete_item(first,item);
 break;
case 3: display(first);
 break;
}
}while(choice!=4);
getch();
return 0;
}


DLL
#include <stdio.h>
#include <stdlib.h>
/*Structure Declaration*/
struct node
{
 int BOOK_ID;
 char BOOK_TITLE[20];
 char AUTHOR[30];
 char EDITION[3];
 struct node *llink;
 struct node *rlink;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode(void)
{
 NODE x;
 x=(NODE)malloc(sizeof(struct node));
 if(x==NULL)
 {
 printf("Out of memory..\n");
 exit(0);
 }
 return x;
}
/*function to insert a node into DLL at the rear-end*/
NODE insert_rear(NODE first)
{
 NODE temp,cur;
 temp=getnode();
 //temp->rlink=temp->llink=NULL;
 printf("\nEnter the BOOK_ID:");
 scanf("%d",&temp->BOOK_ID);
 printf("\nEnter the BOOK_TITLE:");
 scanf("%s",temp->BOOK_TITLE);
 printf("\nEnter the AUTHOR:");
Implement a menu driven Program for the following operations on Doubly Linked List
(DLL) of Library Data with the fields: BOOK_ID, BOOK_TITLE, AUTHOR,
EDITION
(i) Create a DLL of ‘N’ books (Insert front/rear).
(ii) Count the number of nodes in the DLL.
(iii) Delete the node at front/rear.
(iv) Display the contents of DLL.
 scanf("%s",temp->AUTHOR);
 printf("\nEnter the EDITION:");
 scanf("%s",temp->EDITION);
 temp->rlink=temp->llink=NULL;

 if(first==NULL)
 {
 first=temp;
 return first;
 }

 cur=first;
 while(cur->rlink!=NULL)
 {
 cur=cur->rlink;
 }

 cur->rlink=temp;
 temp->llink=cur;

 return first;
}
/*function to insert a node into DLL at the front-end*/
NODE insert_front(NODE first)
{
 NODE temp,cur;
 temp=getnode();
 //temp->rlink=temp->llink=NULL;
 printf("\nEnter the BOOK_ID:");
 scanf("%d",&temp->BOOK_ID);
 printf("\nEnter the BOOK_TITLE:");
 scanf("%s",temp->BOOK_TITLE);
 printf("\nEnter the AUTHOR:");
 scanf("%s",temp->AUTHOR);
 printf("\nEnter the EDITION:");
 scanf("%s",temp->EDITION);
 temp->rlink=temp->llink=NULL;

 if(first==NULL)
 {
 first=temp;
 return first;
 }

 temp->rlink=first;
 first->llink=temp;

 return temp;
}

/*function to count the number of nodes in a DLL*/
NODE count_nodes(NODE first)
{
 int count=0;
 NODE cur;
 if(first==NULL)
 {
 printf("\nList is Empty\n");
 return NULL;
 }

 cur=first;
 while(cur!=NULL)
 {
 count++;
 cur=cur->rlink;
 }

 printf("\nThe no. of nodes in the list = %d\n",count);
 return first;
}
/*function to delete a node from the rear-end in a DLL*/
NODE del_rear(NODE first)
{
 NODE cur,prev;

 if(first==NULL)
 {
 printf("\nList is Empty\n");
 return NULL;
 }

 prev=NULL;
 cur=first;
 while(cur->rlink!=NULL)
 {
 prev=cur;
 cur=cur->rlink;
 }
 printf("\n The node with the following information is Deleted:");
 printf("\nBOOK_ID:%d",cur->BOOK_ID);
 printf("\nBOOK_TITLE:%s",cur->BOOK_TITLE);
 printf("\nAUTHOR:%s",cur->AUTHOR);
 printf("\nEDITION:%s",cur->EDITION);
 free(cur);

 prev->rlink=NULL;

 return first;
}
/*function to delete a node from the front-end in a DLL*/
NODE del_front(NODE first)
{
 NODE cur;

 if(first==NULL)
 {
 printf("\nList is Empty\n");
 return NULL;
 }

 cur=first;
 first=first->rlink;
 printf("\n The node with the following information is Deleted:");
 printf("\nBOOK_ID:%d",cur->BOOK_ID);
 printf("\nBOOK_TITLE:%s",cur->BOOK_TITLE);
 printf("\nAUTHOR:%s",cur->AUTHOR);
 printf("\nEDITION:%s",cur->EDITION);
 free(cur);

 first->llink=NULL;

 return first;
}
/*function to display the node information in a DLL*/
void display(NODE first)
{
 NODE temp;
 if(first==NULL)
 {
 printf("\nDList is Empty...\n");
 return;

 }
 printf("\nThe contents of the DList are:\n");
 for(temp=first;temp!=NULL;temp=temp->rlink)
 {
 printf("BOOK_ID=%d\n",temp->BOOK_ID);
 printf("BOOK_TITLE=%s\n",temp->BOOK_TITLE);
 printf("AUTHOR=%s\n",temp->AUTHOR);
 printf("EDITION=%s\n",temp->EDITION);
 printf("\n");
 }
}
void main()
{
 NODE first=NULL;
 int choice;
 //clrscr();

 for(;;)
 {
 printf("\n*********OPERATIONS ON DLL*****************\n");
 printf("1:Insert-rear\n2:Insert-front\n3.Count the nodes in the List\n");
 printf("4:Delete-rear\n5:Delete-front\n6:Display\n7:Exit\n");
 printf("********************************************\n");
 printf("Enter your choice:");
 scanf("%d",&choice);
 switch(choice)
 {
 case 1: first=insert_rear(first);
 break;
 case 2: first=insert_front(first);
 break;
 case 3: first=count_nodes(first);
 break;
 case 4: first=del_rear(first);
 break;
 case 5: first=del_front(first);
 break;
 case 6: display(first);
 break;
 default:printf("Invalid choice...\n");
 exit(0);
 }
 }
}



CLL
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
/*Stucture declaration for a node*/
struct node
{
char info[10];
struct node *link;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode(void)
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
{
printf("\n\t\tOut of memory");
exit(0);
}
return x;
}
/*function to insert a node at the front end in a CLL*/
NODE insert_front(NODE last, char str[10])
{
 NODE temp;
 temp=getnode();
 strcpy(temp->info,str);
 temp->link=temp;

 if(last==NULL)
Implement a menu driven Program for the following operations on Circular Linked
List.
 {
 return temp;
 }
 else
 temp->link=last->link;

 last->link=temp;
 return last;
}
/*function to insert a node at the rear end in a CLL*/
NODE insert_rear(NODE last, char str[10])
{
 NODE temp;
 temp=getnode();
 strcpy(temp->info,str);
 temp->link=temp;

 if(last==NULL)
 {
 return temp;
 }
 else
 temp->link=last->link;

 last->link=temp;
 return temp;
}

/*function to delete the a node from the rear end in a CLL*/
NODE delete_front(NODE last)
{
 NODE temp;
 if(last==NULL)
 {
 printf("\nList is empty\n");
 return last;
 }
 if(last->link==last)
 {
 printf("\n \t\tThe node with info %s is deleted\n",last->info);
 free(last);
 return NULL;
 }
 temp=last->link;
 last->link=temp->link;
 printf("\n \t\tThe node with info %s is deleted\n",temp->info);
 free(temp);
 return last;
}
/*function to delete the a node from the front end in a CLL*/
NODE delete_rear(NODE last)
{
 NODE temp;
 if(last==NULL)
 {
 printf("\nList is empty\n");
 return last;
 }
 if(last->link==last)
 {
 printf("\n \t\tThe node with info %s is deleted\n",last->info);
 free(last);
 return NULL;
 }
 temp=last->link;
 while(temp->link!=last)
 {
 temp=temp->link;
 }
 temp->link=last->link;
 printf("\n \t\tThe node with info %s is deleted\n",last->info);
 free(last);
 return temp;
}
/*function to count the number of nodes in a CLL*/
void count_nodes(NODE last)
{
 int count=0;
 NODE cur;
 if(last==NULL)
 {
 printf("\n\t\tList is Empty\n");
 return;
 }

 cur=last->link;
 while(cur!=last)
 {
 count++;
 cur=cur->link;
 }
 count++;
 printf("\n\t\tThe no. of nodes in the list = %d\n",count);

}
/*function to display the contents of CLL*/
void display(NODE last)
{
 NODE cur;
 if(last==NULL)
 {
 printf("\n\t\tList is Empty\n");
 return;
 }

 cur=last->link;
 while(cur!=last)
 {
 printf("%s\n",cur->info);
 cur=cur->link;
 }
 printf("%s\n",cur->info);
}
void main()
{
 NODE last=NULL;
 int choice;
 char str[20];
 for(;;)
 {
 printf("************OPERATIONS ON CLL****************\n");
 printf("1:Insert Front\n2:Insert Rear\n3:Delete Front\n4:Delete Rear\n");
 printf("5:Count the nodes in the List\n6:Display\n7:Exit\n");
 printf("********************************************\n");
 printf("Enter the choice:");
 scanf("%d",&choice);
 switch(choice)
 {
 case 1:
printf("\nEnter the string data:");
 scanf("%s",str);
 last=insert_front(last,str);
 break;
 case 2:
printf("\nEnter the string data:");
 scanf("%s",str);
 last=insert_rear(last,str);
 break;
 case 3:
last=delete_front(last);
 break;
 case 4:
last=delete_rear(last);
 break;
 case 5:
count_nodes(last);
 break;
 case 6:
display(last);
 break;
 default:
printf("Invalid choice...\n");
 exit(0);
 }
 }
}
