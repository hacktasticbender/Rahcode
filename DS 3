OUEUE
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<conio.h>
#define QS 5
/*Structure declaration for a node*/
struct node
{
char info[10];
struct node *link;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode(void)
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
{
printf("\nOut of memory");
exit(0);
}
return x;
}
/*function to insert a node at the rear end of SLL as a queue*/
NODE insert_rear(char item[10],NODE first,int *r)
{
NODE temp,cur;
if(*r==QS-1)
{
 printf("\n Queue is Full! insertion not possible\n");
 return first;
}
temp=getnode();
Implement a menu driven Program for the following operations on QUEUES of Strings
using Linked list
(i) Insert an Element into Queue
(ii) Delete an Element from Queue
(iii) Display the contents of Queue
strcpy(temp->info,item);
temp->link=NULL;
if(*r==-1)
{
 *r=*r+1;
 printf("r=%d",*r);
 first=temp;
return first;
}
else
 {
 *r=*r+1;
 cur=first;
 while(cur->link!=NULL)
 {
 cur=cur->link;
 }
 }
cur->link=temp;
return first;
}
/*function to delete a node from the front end of SLL as a queue*/
NODE delete_front(NODE first, int *f, int *r)
{
 NODE temp;
 if(*f>*r)
 {
 printf("\n Queue is Empty! deletion not possible\n");
 *f=0;
 *r=-1;
 return first;
 }
 temp=first;
 first=first->link;
 printf("The node with info [ %s ] is deleted from the front end",temp->info);
 (*f)++;
 free(temp);

 return first;
}
/*function to display contents of the SLL as a queue*/
void display(NODE first, int f, int r)
{
NODE temp;
int i;
if(f>r)
{
printf("\nList is empty");
return;
}
printf("\nThe contents of the list:");
temp=first;
for(i=f;i<=r;i++)
{
printf("%s\n",temp->info);
temp=temp->link;
}
printf("\n");
}
int main()
{
NODE first=NULL;
int choice,f=0,r=-1;
char item[10];
//clrscr();
do
{
printf("\n************************");
printf("\n 1: Queue_Insert\n 2: Queue_delete\n 3: Queue_Display\n 4:Exit\n");
printf("\n************************");
printf("\nEnter the choice:");
scanf("%d",&choice);
switch(choice)
{
case 1:
printf("\nEnter the item to be inserted into the List(string data):");
 scanf("%s",item);
 first=insert_rear(item,first,&r);
break;
case 2:
first=delete_front(first,&f,&r);
 break;
case 3:
display(first,f,r);
 break;
}
}while(choice!=4);
getch();
return 0;
}


PRIORITY
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
/*Stucture declaration*/
struct node
{
int data;
int priority;
struct node *link;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode(void)
{
NODE x;
x=(NODE)malloc(sizeof(struct node));
if(x==NULL)
{
printf("\nOut of memory");
exit(0);
}
return x;
}
/*function to insert a node based on priority*/
NODE insert_priority(NODE first)
{
 int val, pri;
 NODE temp,cur,prev;
 printf("\n Enter the value:");
 scanf("%d", &val);
 printf("\n Enter the priority:");
 scanf("%d", &pri);
 temp=getnode();
 temp->data=val;
Implement a menu driven program to perform the following operations on priority
queue using linked list.
(i) Insert a node based on priority.
(ii) Delete a node from the queue
(iii) Display the contents of the queue
 temp->priority= pri;
 temp->link=NULL;
 if(first==NULL || pri < first->priority )
{
 temp->link = first;
 first = temp;
 return first;
}
prev=NULL;
cur = first;
//next= cur->link;
while(cur!=NULL && cur->priority<=pri)
{
 prev=cur;
 cur = cur->link;
}
if(cur==NULL)
{
 prev->link=temp;
 return first;
}
temp->link = cur;
prev->link = temp;
return first;
}
/*function to delete a node from the front end of the priority queue*/
NODE delete(NODE first)
{
 NODE temp;
 if(first == NULL)
{
 printf("\n QUEUE UNDERFLOW" );
 return NULL;
}
temp = first;
printf("\n Deleted item is: %d", temp->data);
first = first->link;
free(temp);
 return first;
}
/*function to display the contents of priority queue*/
void display(NODE first)
{
 NODE temp;
 temp = first;
 if(first == NULL)
{
 printf("\nQUEUE IS EMPTY" );
 return;
}
printf("\n THE CONTENTS OF PRIORITY QUEUE IS : " );
while(temp != NULL)
{
printf( "\n%d [priority=%d]", temp->data, temp->priority );
temp=temp->link;
}
}
void main()
{
 NODE first=NULL;
 int option;
 //clrscr();
 do
 {
 printf("\n *****MAIN MENU*****");
 printf("\n 1. INSERT");
 printf("\n 2. DELETE");
 printf("\n 3. DISPLAY");
 printf("\n 4. EXIT");
 printf("\n Enter your option : ");
 scanf( "%d", &option);
 switch(option)
 {
 case 1:
 first=insert(first);
 break;
 case 2:
 first = delete(first);
 break;
 case 3:
 display(first);
 break;
 }
 }while(option!=4);
}

BST
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int flag;
/*structure declaration for a node*/
struct node
{
 int info;
 struct node *llink,*rlink;
};
typedef struct node *NODE;
/*function to allocate memory for a node*/
NODE getnode()
{
 NODE x;
 x=(NODE)malloc(sizeof(struct node));
 if(x==NULL)
 {
 printf("out of memory\n");
 exit(0);
 }
return x;
}
/*function to insert a node into BST*/
NODE insert(NODE root,int item)
{
 NODE temp,cur,prev;
 temp=getnode();
 temp->info=item;
 temp->llink=temp->rlink=NULL;
 if(root==NULL)
 return temp;
 prev =NULL;
 cur=root;
 while(cur!=NULL)
 {
Implement a menu driven Program for the following operations on Binary Search Tree
(BST) of Integers
(i) Create a BST of N Integers
(ii) Traverse the BST in Inorder, Preorder and Postorder
 prev=cur;
 if(item==cur->info)
 {
 printf("duplicate items are not allowed\n");
 free(temp);
 return root;
 }
 if(item<cur->info)
 cur=cur->llink;
 else
 cur=cur->rlink;
 }
 if(item<prev->info)
 prev->llink=temp;
 else
 prev->rlink=temp;
 return root;
}
/*function for inorder traversal*/
void in_order(NODE root)
{
 if(root!=NULL)
 {
 in_order(root->llink);
 printf("%d\t",root->info);
 in_order(root->rlink);
 }
}
/*function for preorder traversal*/
void pre_order(NODE root)
{
 if(root!=NULL)
 {
 printf("%d\t",root->info);
 pre_order(root->llink);
 pre_order(root->rlink);
 }
}
/*function for postorder traversal*/
void post_order(NODE root)
{
 if(root!=NULL)
 {
 post_order(root->llink);
 post_order(root->rlink);
 printf("%d\t",root->info);
 }
}
void main()
{
 NODE root=NULL;
 int ch,item;
 //clrscr();
 for(;;)
 {
 printf("\n1.BST Insertion\n 2.preorder\n 3.inorder\n 4.postorder\n 5.exit\n");
 printf("\nEnter your choice:");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1:
 printf("\nEnter the item to be inserted:");
 scanf("%d",&item);
 root=insert(root,item);
 break;
 case 2:
 printf("pre traversal is\n");
 pre_order(root);
 break;
 case 3:
 printf("in traversal is\n");
 in_order(root);
 break;
 case 4:
 printf("post traversal is\n" );
 post_order(root);
 break;
 default:
 exit(0);
 }
 }
}
