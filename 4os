#include<stdio.h>  
void main()  
{ 
 int buffer[10], bufsize, in, out, produce, consume, choice=0;  
in = 0;  
out = 0;  
bufsize = 10;  
while(choice !=3)  
    {  
      printf("\n 1. Produce \t 2. Consume \t3. Exit "); 
      printf("\n Enter your choice: ");  
      scanf("%d", &choice);  
      switch(choice)  
            {  
            case 1:  
                  if((in+1)%bufsize==out)  
                       printf("\n Buffer is Full"); 
Operating System (Intergrated)Lab Manual- P21CS504 
 
V Semester Page 10 
 
                  else 
                        {  
                         printf("\n Enter the value: ");  
                         scanf("%d", &produce);  
                         buffer[in] = produce; 
                         in = (in+1)%bufsize;  
                        } 
                    break;  
           case 2:  
                if(in == out) 
                     printf("\n Buffer is Empty"); 
                else 
                    {  
                    consume = buffer[out];  
                    printf("\n The consumed value is %d", consume);  
                    out = (out+1)%bufsize; 
                    }  
                     break;  
                    } 
              } 
  }



5
#include<stdio.h> 
#include<stdlib.h> 
int one(); 
int two() ; 
int tph, philname[20], status[20], howhung, hu[20], cho;  
int main()  
{  
    int i;  
    printf("\n\nDINING PHILOSOPHER PROBLEM");  
    printf("\nEnter the total no. of philosophers: ");  
    scanf("%d",&tph);  
    for(i=0;i<tph;i++) 
    {  
        philname[i] = (i+1); status[i]=1;  
     }  
    printf("How many are hungry : ");  
    scanf("%d", &howhung); 
    if(howhung==tph) 
    {  
        printf("\nAll are hungry..\nDead lock stage will occur");  
        printf("\nExiting.."); 
       }  
        else 
        {  
            for(i=0;i<howhung;i++) 
            { 
                printf("Enter philosopher %d position: ",(i+1));  
                scanf("%d", &hu[i]); status[hu[i]]=2;    
            }  
             
Operating System (Intergrated)Lab Manual- P21CS504 
 
V Semester Page 13 
 
 
do{  
            printf("1.One can eat at a time\t2.Two can eat at a time\t3.Exit\nEnter your choice:");  
                scanf("%d", &cho); 
                switch(cho)  
                {  
                    case 1: 
                            one();  
                            break;  
                    case 2:  
                             two();  
                             break;  
                    case 3: 
                        exit(0);  
                    default:  
                        printf("\nInvalid option..");  
                } 
            } 
            while(1); 
            }  
    }  
 
int one() 
{ 
    int pos=0, x, i;  
    printf("\nAllow one philosopher to eat at any time\n");  
    for(i=0;i<howhung; i++, pos++)  
    { printf("\nP %d is granted to eat", philname[hu[pos]]);  
    for(x=pos;x<howhung;x++) 
    printf("\nP %d is waiting", philname[hu[x]]); 
    }  
}  
 
 
Operating System (Intergrated)Lab Manual- P21CS504 
 
V Semester Page 14 
 
 
int two()  
{  
int i, j, s=0, t, r, x;  
printf("\n Allow two philosophers to eat at same time\n"); 
for(i=0;i<howhung;i++)  
{  
    for(j=i+1;j<howhung;j++) 
    { 
        if(abs(hu[i]-hu[j])>=1&& abs(hu[i]-hu[j])!=4) 
        {  
            printf("\n\ncombination %d \n", (s+1));  
            t=hu[i]; 
            r=hu[j]; 
            s++;  
            printf("\nP %d and P %d are granted to eat", philname[hu[i]], philname[hu[j]]); 
            for(x=0;x<howhung;x++) 
            {  
                if((hu[x]!=t)&&(hu[x]!=r)) 
                printf("\nP %d is waiting", philname[hu[x]]); 
                }  
            }  
        } 
       } 
    } 

6
 
#include<stdio.h>  
#include<conio.h>  
main()  
{ 
int bt[20], wt[20], tat[20], i, n; 
float wtavg, tatavg;  
clrscr();  
printf("\nEnter the number of processes -- "); 
scanf("%d", &n);  
for(i=0;i<n;i++)  
{  
printf("\nEnter Burst Time for Process %d -- ", i);  
scanf("%d", &bt[i]);  
}  
wt[0] = wtavg = 0;  
tat[0] = tatavg = bt[0]; 
for(i=1;i<n;i++) 
{ 
wt[i] = wt[i-1] +bt[i-1]; 
tat[i] = tat[i-1] +bt[i];  
wtavg = wtavg + wt[i];  
tatavg = tatavg + tat[i];  
}  
printf("\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");  
} 
for(i=0;i<n;i++) 
printf("\n\t P%d \t\t %d \t\t %d \t\t %d", i, bt[i], wt[i], tat[i]);  
printf("\nAverage Waiting Time -- %f", wtavg/n); 
printf("\nAverage Turnaround Time -- %f", tatavg/n);  
getch();  
}
